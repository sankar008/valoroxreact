{"ast":null,"code":"import { useState, createContext, useContext, useReducer, useEffect, createElement } from 'react';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n}\n\nfunction useLocalStorage(key, initialValue) {\n  var _a = useState(function () {\n    try {\n      var item = typeof window !== \"undefined\" && window.localStorage.getItem(key);\n      return item ? item : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  }),\n      storedValue = _a[0],\n      setStoredValue = _a[1];\n\n  var setValue = function setValue(value) {\n    try {\n      var valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, valueToStore);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nvar initialState = {\n  items: [],\n  isEmpty: true,\n  totalItems: 0,\n  totalUniqueItems: 0,\n  cartTotal: 0,\n  metadata: {}\n};\nvar CartContext = createContext(initialState);\n\nvar createCartIdentifier = function createCartIdentifier(len) {\n  if (len === void 0) {\n    len = 12;\n  }\n\n  return __spreadArrays(Array(len)).map(function () {\n    return (~~(Math.random() * 36)).toString(36);\n  }).join(\"\");\n};\n\nvar useCart = function useCart() {\n  var context = useContext(CartContext);\n  if (!context) throw new Error(\"Expected to be wrapped in a CartProvider\");\n  return context;\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"SET_ITEMS\":\n      return generateCartState(state, action.payload);\n\n    case \"ADD_ITEM\":\n      {\n        var items = __spreadArrays(state.items, [action.payload]);\n\n        return generateCartState(state, items);\n      }\n\n    case \"UPDATE_ITEM\":\n      {\n        var items = state.items.map(function (item) {\n          if (item.id !== action.id) return item;\n          return _assign(_assign({}, item), action.payload);\n        });\n        return generateCartState(state, items);\n      }\n\n    case \"REMOVE_ITEM\":\n      {\n        var items = state.items.filter(function (i) {\n          return i.id !== action.id;\n        });\n        return generateCartState(state, items);\n      }\n\n    case \"EMPTY_CART\":\n      return initialState;\n\n    case \"UPDATE_CART_META\":\n      return _assign(_assign({}, state), {\n        metadata: _assign(_assign({}, state.metadata), action.payload)\n      });\n\n    default:\n      throw new Error(\"No action specified\");\n  }\n}\n\nvar generateCartState = function generateCartState(state, items) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  var totalUniqueItems = calculateUniqueItems(items);\n  var isEmpty = totalUniqueItems === 0;\n  return _assign(_assign(_assign({}, initialState), state), {\n    items: calculateItemTotals(items),\n    totalItems: calculateTotalItems(items),\n    totalUniqueItems: totalUniqueItems,\n    cartTotal: calculateCartTotal(items),\n    isEmpty: isEmpty\n  });\n};\n\nvar calculateItemTotals = function calculateItemTotals(items) {\n  return items.map(function (item) {\n    return _assign(_assign({}, item), {\n      itemTotal: item.price * item.quantity\n    });\n  });\n};\n\nvar calculateCartTotal = function calculateCartTotal(items) {\n  return items.reduce(function (total, item) {\n    return total + item.quantity * item.price;\n  }, 0);\n};\n\nvar calculateTotalItems = function calculateTotalItems(items) {\n  return items.reduce(function (sum, item) {\n    return sum + item.quantity;\n  }, 0);\n};\n\nvar calculateUniqueItems = function calculateUniqueItems(items) {\n  return items.length;\n};\n\nvar CartProvider = function CartProvider(_a) {\n  var children = _a.children,\n      cartId = _a.id,\n      _b = _a.defaultItems,\n      defaultItems = _b === void 0 ? [] : _b,\n      onSetItems = _a.onSetItems,\n      onItemAdd = _a.onItemAdd,\n      onItemUpdate = _a.onItemUpdate,\n      onItemRemove = _a.onItemRemove,\n      _c = _a.storage,\n      storage = _c === void 0 ? useLocalStorage : _c,\n      metadata = _a.metadata;\n  var id = cartId ? cartId : createCartIdentifier();\n\n  var _d = storage(cartId ? \"react-use-cart-\" + id : \"react-use-cart\", JSON.stringify(_assign(_assign({\n    id: id\n  }, initialState), {\n    items: defaultItems,\n    metadata: metadata\n  }))),\n      savedCart = _d[0],\n      saveCart = _d[1];\n\n  var _e = useReducer(reducer, JSON.parse(savedCart)),\n      state = _e[0],\n      dispatch = _e[1];\n\n  useEffect(function () {\n    saveCart(JSON.stringify(state));\n  }, [state, saveCart]);\n\n  var setItems = function setItems(items) {\n    dispatch({\n      type: \"SET_ITEMS\",\n      payload: items\n    });\n    onSetItems && onSetItems(items);\n  };\n\n  var addItem = function addItem(item, quantity) {\n    if (quantity === void 0) {\n      quantity = 1;\n    }\n\n    if (!item.id) throw new Error(\"You must provide an `id` for items\");\n    if (quantity <= 0) return;\n    var currentItem = state.items.find(function (i) {\n      return i.id === item.id;\n    });\n    if (!currentItem && !item.hasOwnProperty(\"price\")) throw new Error(\"You must pass a `price` for new items\");\n\n    if (!currentItem) {\n      var payload_1 = _assign(_assign({}, item), {\n        quantity: quantity\n      });\n\n      dispatch({\n        type: \"ADD_ITEM\",\n        payload: payload_1\n      });\n      onItemAdd && onItemAdd(payload_1);\n      return;\n    }\n\n    var payload = _assign(_assign({}, item), {\n      quantity: currentItem.quantity + quantity\n    });\n\n    dispatch({\n      type: \"UPDATE_ITEM\",\n      id: item.id,\n      payload: payload\n    });\n    onItemUpdate && onItemUpdate(payload);\n  };\n\n  var updateItem = function updateItem(id, payload) {\n    if (!id || !payload) {\n      return;\n    }\n\n    dispatch({\n      type: \"UPDATE_ITEM\",\n      id: id,\n      payload: payload\n    });\n    onItemUpdate && onItemUpdate(payload);\n  };\n\n  var updateItemQuantity = function updateItemQuantity(id, quantity) {\n    if (quantity <= 0) {\n      onItemRemove && onItemRemove(id);\n      dispatch({\n        type: \"REMOVE_ITEM\",\n        id: id\n      });\n      return;\n    }\n\n    var currentItem = state.items.find(function (item) {\n      return item.id === id;\n    });\n    if (!currentItem) throw new Error(\"No such item to update\");\n\n    var payload = _assign(_assign({}, currentItem), {\n      quantity: quantity\n    });\n\n    dispatch({\n      type: \"UPDATE_ITEM\",\n      id: id,\n      payload: payload\n    });\n    onItemUpdate && onItemUpdate(payload);\n  };\n\n  var removeItem = function removeItem(id) {\n    if (!id) return;\n    dispatch({\n      type: \"REMOVE_ITEM\",\n      id: id\n    });\n    onItemRemove && onItemRemove(id);\n  };\n\n  var emptyCart = function emptyCart() {\n    return dispatch({\n      type: \"EMPTY_CART\"\n    });\n  };\n\n  var getItem = function getItem(id) {\n    return state.items.find(function (i) {\n      return i.id === id;\n    });\n  };\n\n  var inCart = function inCart(id) {\n    return state.items.some(function (i) {\n      return i.id === id;\n    });\n  };\n\n  var updateCartMetadata = function updateCartMetadata(metadata) {\n    if (!metadata) return;\n    dispatch({\n      type: \"UPDATE_CART_META\",\n      payload: metadata\n    });\n  };\n\n  return createElement(CartContext.Provider, {\n    value: _assign(_assign({}, state), {\n      getItem: getItem,\n      inCart: inCart,\n      setItems: setItems,\n      addItem: addItem,\n      updateItem: updateItem,\n      updateItemQuantity: updateItemQuantity,\n      removeItem: removeItem,\n      emptyCart: emptyCart,\n      updateCartMetadata: updateCartMetadata\n    })\n  }, children);\n};\n\nexport { CartProvider, createCartIdentifier, initialState, useCart };","map":null,"metadata":{},"sourceType":"module"}